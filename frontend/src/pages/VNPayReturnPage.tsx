import { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { confirmVNPayPayment } from '../services/paymentService';

const VNPayReturnPage = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [isProcessing, setIsProcessing] = useState(true);
  const [processingStep, setProcessingStep] = useState('ƒêang x√°c th·ª±c th√¥ng tin t·ª´ VNPay...');

  useEffect(() => {
    const processVNPayReturn = async () => {
      try {
        // Get all VNPay return parameters
        const vnpayParams: Record<string, string> = {};
        searchParams.forEach((value, key) => {
          vnpayParams[key] = value;
        });

        const transactionId = searchParams.get('vnp_TxnRef');
        const responseCode = searchParams.get('vnp_ResponseCode');
        
        if (!transactionId) {
          navigate('/payment-failed', { 
            state: { 
              message: 'Kh√¥ng t√¨m th·∫•y m√£ giao d·ªãch t·ª´ VNPay' 
            } 
          });
          return;
        }

        setProcessingStep('ƒêang x√°c th·ª±c ch·ªØ k√Ω ƒëi·ªán t·ª≠...');
        
        // Immediately determine result based on VNPay response code
        if (responseCode === '00') {
          // Payment successful
          setProcessingStep('Thanh to√°n th√†nh c√¥ng! ƒêang ho√†n t·∫•t...');
          setTimeout(() => {
            navigate('/payment-processing', {
              state: {
                isSuccess: true,
                transactionId: transactionId,
                orderId: vnpayParams.vnp_OrderInfo?.match(/\d+/)?.[0] || transactionId
              }
            });
          }, 2000);
        } else {
          // Payment failed
          const failureMessages: Record<string, string> = {
            '24': 'Giao d·ªãch b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng',
            '51': 'T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞',
            '65': 'T√†i kho·∫£n ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y',
            '75': 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨',
            '79': 'Nh·∫≠p sai m·∫≠t kh·∫©u qu√° s·ªë l·∫ßn quy ƒë·ªãnh',
            '99': 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
          };
          
          const errorMessage = failureMessages[responseCode] || 'Giao d·ªãch kh√¥ng th√†nh c√¥ng';
          setProcessingStep(`Thanh to√°n th·∫•t b·∫°i: ${errorMessage}`);
          
          setTimeout(() => {
            navigate('/payment-failed', {
              state: {
                message: errorMessage,
                transactionId: transactionId,
                responseCode: responseCode
              }
            });
          }, 3000);
        }

        // Try to confirm with backend (optional - for logging/verification)
        try {
          await confirmVNPayPayment(vnpayParams);
        } catch (error) {
          console.log('Backend confirmation failed, but proceeding with frontend result');
        }

      } catch (error) {
        console.error('Error processing VNPay return:', error);
        setProcessingStep('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n');
        setTimeout(() => {
          navigate('/payment-failed', {
            state: {
              message: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n'
            }
          });
        }, 3000);
      }
    };

    processVNPayReturn();
  }, [navigate, searchParams]);

  // Show enhanced loading while redirecting
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl p-8 text-center max-w-md w-full">
        {/* Animated VNPay logo/icon */}
        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-spin">
          <svg className="w-8 h-8 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
        </div>
        
        <h1 className="text-2xl font-bold text-gray-900 mb-2">üîÑ ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ VNPay</h1>
        <p className="text-gray-600 mb-4">ƒêang x√°c th·ª±c th√¥ng tin thanh to√°n v√† chu·∫©n b·ªã k·∫øt qu·∫£...</p>
        
        {/* Enhanced progress indicators */}
        <div className="space-y-3 mb-6">
          <div className="flex items-center text-sm text-green-600">
            <div className="w-2 h-2 bg-green-500 rounded-full mr-3"></div>
            <span>‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ VNPay</span>
          </div>
          <div className="flex items-center text-sm text-blue-600">
            <div className="w-2 h-2 bg-blue-500 rounded-full mr-3 animate-pulse"></div>
            <span>‚è≥ {processingStep}</span>
          </div>
          <div className="flex items-center text-sm text-gray-400">
            <div className="w-2 h-2 bg-gray-300 rounded-full mr-3"></div>
            <span>‚è≥ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng...</span>
          </div>
        </div>
        
        {/* Loading animation */}
        <div className="flex justify-center mb-4">
          <div className="flex space-x-1">
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0ms'}}></div>
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '150ms'}}></div>
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '300ms'}}></div>
          </div>
        </div>
        
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
          <p className="text-sm text-blue-800">üîê ƒê·∫£m b·∫£o an to√†n giao d·ªãch</p>
        </div>
      </div>
    </div>
  );
};

export default VNPayReturnPage; 